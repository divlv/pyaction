name: Python application

on: [push]

env:
  MY_NAME: DZA-build
  PY_DOCKER_CONTAINER_NAME: aeggrid
  PROJECT_PATH: /_work/pyaction/pyaction
  SECRET_USER_NAME: ${{ secrets.SECRET_USER_NAME }}
  SECRET_SWITCH: ${{ secrets.SECRET_SWITCH }}
  #
  DOCKER_REGISTRY_PATH: ${{ secrets.DOCKER_REGISTRY_PATH }}
  DOCKER_REGISTRY_USER: ${{ secrets.DOCKER_REGISTRY_USER }}
  DOCKER_REGISTRY_PASS: ${{ secrets.DOCKER_REGISTRY_PASS }}
  #
  COMMIT_ID: $(echo ${GITHUB_SHA} | cut -c1-8)


jobs:
    prepare_all:
        name: Initial operations
        runs-on: [self-hosted, linux]
        steps:
        - name: Show technical info
          env:
            MY_VAR: sample value
          run: |
            echo $MY_VAR
            echo $SECRET_USER_NAME
            docker --version
        - name: IF statement based on secret
          if: env.SECRET_SWITCH=='should be visible'
          run: |
            echo "Secrets are visible to the pipeline. OK."

    build:
        name: Build code
        runs-on: [self-hosted, linux]
        steps:
            - name: Checkout source code (GitHub action)
              uses: actions/checkout@v2
            - name: Set up Python 3
              run: |
                apt-get -y install python3
                apt-get -y install python3-pip
                python3 --version
            - name: Install Python project dependencies
              run: |
                pip3 install -r requirements.txt
            - name: Lint with flake8
              run: |
                pip3 install flake8
                # stop the build if there are Python syntax errors or undefined names
                flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
                # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
                flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
            - name: Build Docker image
              run: |
                pwd
                ls -la
                echo "Logging in to Docker registry $DOCKER_REGISTRY_PATH"
                docker login -u $DOCKER_REGISTRY_USER -p $DOCKER_REGISTRY_PASS $DOCKER_REGISTRY_PATH
                echo "Building and tagging Docker image"
                docker build --tag $DOCKER_REGISTRY_PATH/$PY_DOCKER_CONTAINER_NAME:$(echo ${GITHUB_SHA} | cut -c1-8) .
                echo "Pushing result to Docker registry"
                docker push $DOCKER_REGISTRY_PATH/$PY_DOCKER_CONTAINER_NAME:$(echo ${GITHUB_SHA} | cut -c1-8)


